[탭기능 만들며 배우는 for 반복문]
// 버튼 0 누르면
// 모든 버튼에 붙은 orange 클래스명 제거
// 버튼 0에 오렌지 클래스명 추가
// 모든 div show 클래스명 제거
// div 0에 show 클래스명 추가

querySelectorAll('.tab-button')[0] 
== $('.tab-button').eq(0)

*removeClass -> 클래스명에서 해당 단어 삭제
$('.tab-button').removeClass('orange');
*addClass -> 클래스명에서 해당 단어 추가
$('.tab-button').eq(0).addClass('orange');

*반복문 사용하는 법
for (횟수){
   consol.log('안녕');
};
for (let i = 0; i < 3; i++){
   consol.log('안녕');
};

var let 반복문시 let을 사용! 변수의 범위가 차이가 있음 

1.이벤트 버블링 항상 일어남
2. 이벤트 관련 기능들 사용 가능 
function(e) {
  e.target; // 유저가 실제로 누른 것
  e.currentTarget; // 이벤트리스너 달린 곳
  == this;
  e.preventDefault(); // 이벤트 기본동작 막아줌
  e.stopPropagation(); // 내 상위요소로 이벤트 버블링 막아줌
}

이벤트 버블링 응용과 dataset
1. 함수로 축약할 때 변수 있으면 파라미터로 바꿔보기
2. data-id로 몰래 숨기기 가능 / 콘솔로 확인 가능 
3. 이벤트리스너 1개만 써도 개발가능할 수도 -> 탭열기(e.target.dataset.id)

Array 자료형 ['', '', ... ]
Object 자료형 {name: '', price: '', ... }  key-value 자료형


개발방식1. 완성된 html 파일  => Server-side rendering 서버가 귀찮
개발방식2. 빈 html 파일 + 데이터 (html 완성은 JS가 하도록함) => Client-side rendering 서버가 편함 
프론트는 빈html에 데이터 꽂는 작업을 많이 할텐데 그게 '데이터바인딩'


JS로 html 만들기
<div id="test">
</div>
<script>
1.  var a = document.createElement('p')
  a.innerHTML = '안녕';
  document.querySelector('#test').appnedChild(a);

2.  var a = '<p>안녕</p>'
   document.quertSelector('#test').innerAdjacentHTML('beforeend', a);

3.  $('#test').append(a);
</script>

innerAdjacentHTML, append 아래에 html 추가해줌
innerHTML, html 그냥 다 없애고 새로 추가해줌

반복문의 용도
1. 코드 반복
2. array, object 데이터 전부 꺼낼 때

[forEach, for in 반복문] 
for (var i = 0; i < pants.length; i++){
            option 태그 생성해주세요
          }
이게 너무 기니까, 배열일 때 간편하게 forEach 사용, 배열 길이만큼 반복문을 돌려준다 
pants.forEach(funtion(a){
 $('.form-select').eq(1).append<`<option>${a}</option>`);
})
a는 pants 안에 있던 값들

오브젝트 문법을 반목문 돌리고싶으면 for in문 사용
var obj = {name: 'kim', age: 20}
for (var key in obj) {
  console.log(obj[key]);
}

funtion{}, arrow funtion () => {}


